import os 
import re

import tabula
import pdb
import argparse
import pandas as pd
import subprocess

pdf_pattern = re.compile(r'.*\.pdf')
file_name_patter = re.compile(r'.*\.xlsx')

def start(files, args):
    """_summary_: I make the scrip startup depending on the given parameters 

    Args:
        files (list): Files to extract (PDF)
        args (str): Arguments inserted at the start of program
    """
    if args.result_name:
        name = args.result_name 
        if re.match(file_name_patter,args.result_name ):
            main(files, df_name=name)
        else:
            name = name + '.xlsx'
            main(files, df_name=name)
    else:
        main(files)


def delete_duplicate(df) : 
    """Eliminates duplicate column generated by concatenating data frames

    Args:
        df (pd.DataFrame): df

    Returns:
        pd.DataFrame: df
    """
    i = 2
    while True:
        try:

            name = f'Quarter_{i}'
            df.drop(name, axis=1, inplace=True)
            i += 1
        
        except:
            return df
    
    

def concat_df(list_of_df:list) -> pd.DataFrame :
    """Function that concatenates all data frames

    Args:
        list_of_df (list): List of data frames

    Returns:
        pd.DataFrame
    """
    df = pd.concat(list_of_df)
    df = df.reset_index().drop('index', axis='columns').dropna()
    return df

def extract_special_df(df, column_name:str, quartal:str) -> pd.DataFrame:
    """Extract df number 3, and do the indicated processing to format it.

    Args:
        df (pd.DataFrame): df
        column_name (_type_): Column name (Example: 2021/1)
        quartal (_type_): Name of the quarter

    Returns:
        pd.DataFrame: df
    """
    list_columns = list(df.columns)
    list_columns.remove('Unnamed: 0') 

    box_df = []
    for i in range(df.shape[0]):
        df_c = df.iloc[i:i+1,:]

        df_c = df_c.pivot_table(values=list_columns, columns='Unnamed: 0')
        columns_name = df_c.columns[0]
        df_c = df_c.sort_values(by=[columns_name], ascending=False)
        df_c = df_c.reset_index()
        df_c['index'] = df_c['index'].apply(lambda x : columns_name+': '+x)

        columns_names = list(df_c.columns)
        df_c = df_c.rename(columns={list(df_c.columns)[0]:quartal, list(df_c.columns)[1]:column_name})
        box_df.append(df_c)

    return pd.concat(box_df, axis = 0)


def extract_column_name(file:str)-> str: 
    """Extracts the name specified for the column

    Args:
        file (str): Document name


    """
    pattern_name = re.compile(r'(.*)\.pdf')

    try:
        column_name = re.match(pattern_name, file).group(1)

        if column_name:
            return column_name
        return file.split('.pdf')[0].replace('/files','')

    except:
        return file.split('.pdf')[0].replace('/files','')


def format_df(tables, column_name, quartal,dirname):
    """Function where the DF is formatted, converts the PDF tables to the desired table model.

    Args:
        tables (pd.DataFrame): df
        column_name (_type_): Column name
        quartal (_type_): Column name (Quartal)
        dirname (_type_): Folder name

    Returns:
        _type_: _description_
    """
    columns = [quartal, column_name]

    box = []
    for i in range(len(tables)):
        if i == 3:
            continue

        path = f'{dirname}/results_{i}.xlsx'
        df = pd.read_excel(path, names = columns)
        df.rename(columns={df.columns[0]:columns[0],df.columns[1]:columns[1]})
        os.remove(path)
        box.append(df)

    path = f'{dirname}/results_{3}.xlsx'
    especial_df = pd.read_excel(path, header=1)
    os.remove(path)
    box.insert(-1,extract_special_df(especial_df, column_name, quartal),)
    
    df = concat_df(box)
    return df
    # df.to_excel('results.xlsx', index=False)



def main(files, df_name='results.xlsx' ,dir=None):

    box = []
    for idx, file in enumerate(files):
        quartal = f'Quarter_{idx+1}'
        column_name = extract_column_name(file)
        tables = tabula.read_pdf(file, pages='all', multiple_tables=True, pandas_options={'header': None}, encoding='utf-8', lattice=True)
        main_dir = 'model'

        try:
            os.makedirs(f'./{main_dir}')
        except FileExistsError:
            pass


        for idx, df in enumerate(tables):
            df.to_excel(f'{main_dir}/results_{idx}.xlsx', index=False)
        
        df = format_df(tables, column_name, quartal, main_dir)
        box.append(df)

    df = pd.concat(box, axis=1)
    df = df.drop_duplicates()
    df = delete_duplicate(df)
    df.rename(columns={df.columns[0]:"Quartal"}, inplace=True)
    df.to_excel(df_name, index=False)
    df = pd.read_excel(df_name)
    df.to_excel(df_name, index=False)

if __name__ == '__main__':
    files = os.listdir('files/')
    files = ['files/'+file for file in files if re.match(pdf_pattern, file)]

    parser = argparse.ArgumentParser()
    parser.add_argument('--result_name','-r',type=str,help='Name of the resulting file',nargs='?')
    args = parser.parse_args()
    start(files, args)